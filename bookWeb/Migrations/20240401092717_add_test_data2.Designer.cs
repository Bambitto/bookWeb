// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookWebApi.Data;

#nullable disable

namespace bookWebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240401092717_add_test_data2")]
    partial class add_test_data2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("bookWebApi.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43bee7aa-bd10-406e-a501-009701b25822"),
                            Author = "Test",
                            CreatedDate = new DateTime(2024, 4, 1, 11, 27, 17, 31, DateTimeKind.Local).AddTicks(5496),
                            Description = "test",
                            GenreId = new Guid("17320e59-c5dc-427a-80fc-22e73e353961"),
                            Title = "Test",
                            UpdatedDate = new DateTime(2024, 4, 1, 11, 27, 17, 31, DateTimeKind.Local).AddTicks(5548)
                        },
                        new
                        {
                            Id = new Guid("08465f3f-f45b-4766-9d30-2efe280c1961"),
                            Author = "Test2",
                            CreatedDate = new DateTime(2024, 4, 1, 11, 27, 17, 31, DateTimeKind.Local).AddTicks(5550),
                            Description = "test2",
                            GenreId = new Guid("f4b085dc-f486-4069-acc0-ba8c9dc1fb8b"),
                            Title = "Test2",
                            UpdatedDate = new DateTime(2024, 4, 1, 11, 27, 17, 31, DateTimeKind.Local).AddTicks(5552)
                        });
                });

            modelBuilder.Entity("bookWebApi.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("17320e59-c5dc-427a-80fc-22e73e353961"),
                            Name = "Komedia"
                        },
                        new
                        {
                            Id = new Guid("f4b085dc-f486-4069-acc0-ba8c9dc1fb8b"),
                            Name = "Kryminał"
                        });
                });

            modelBuilder.Entity("bookWebApi.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("41d7f06c-966d-4fae-80a1-28813879900c"),
                            BookId = new Guid("43bee7aa-bd10-406e-a501-009701b25822"),
                            Comment = "test",
                            Score = 4,
                            UserId = new Guid("a4c47528-e04d-4817-a520-854564fe190a")
                        },
                        new
                        {
                            Id = new Guid("27ff0714-2929-41eb-a0c6-bb7a33b2fb1a"),
                            BookId = new Guid("08465f3f-f45b-4766-9d30-2efe280c1961"),
                            Comment = "test",
                            Score = 5,
                            UserId = new Guid("a4c47528-e04d-4817-a520-854564fe190a")
                        });
                });

            modelBuilder.Entity("bookWebApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4c47528-e04d-4817-a520-854564fe190a"),
                            Email = "test@test.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Password = "test123"
                        });
                });

            modelBuilder.Entity("bookWebApi.Entities.Book", b =>
                {
                    b.HasOne("bookWebApi.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("bookWebApi.Entities.Review", b =>
                {
                    b.HasOne("bookWebApi.Entities.Book", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookWebApi.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookWebApi.Entities.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("bookWebApi.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("bookWebApi.Entities.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
